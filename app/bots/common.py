from typing import Any, Dict, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


# ====== GA (–≥–ª–∞–≤–Ω—ã–π –±–æ—Ç) ======

def ga_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öôÔ∏è –î–µ–ø–ª–æ–π",  callback_data="ga:deploy"),
            InlineKeyboardButton(text="üîÅ –†–µ—Å—Ç–∞—Ä—Ç", callback_data="ga:restart"),
        ],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:clients:1")],
    ])


def ga_clients_kb(items: List[Dict[str, Any]], page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for t in items:
        label = f"@{t.get('owner_username') or t['owner_user_id']}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"ga:tenant:{t['id']}")])

    pager: list[InlineKeyboardButton] = []
    if has_prev:
        pager.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"ga:clients:{page-1}"))
    pager.append(InlineKeyboardButton(text=f"–°—Ç—Ä. {page}", callback_data="noop"))
    if has_next:
        pager.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"ga:clients:{page+1}"))
    rows.append(pager or [InlineKeyboardButton(text="‚Äî", callback_data="noop")])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ga:home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def tenant_card_kb(tenant_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"ga:tenantdel:{tenant_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ga:clients:1")],
    ])


# ====== CHILD (–±–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞) ======

def child_admin_kb(collect_enabled: bool) -> InlineKeyboardMarkup:
    flag = "‚úÖ" if collect_enabled else "‚ùå"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="child:greet:hello"),
            InlineKeyboardButton(text="üßπ –ü—Ä–æ—â–∞–Ω–∏–µ",    callback_data="child:greet:bye"),
        ],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="child:settings")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="child:stats")],
    ])


def child_settings_kb(collect_enabled: bool) -> InlineKeyboardMarkup:
    flag = "‚úÖ" if collect_enabled else "‚ùå"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{flag} –ö–æ–ø–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="child:settings:collect_toggle")],
        [InlineKeyboardButton(text="üß∫ –°–æ–±—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="child:settings:collect_run")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="child:home")],
    ])


def channels_list_kb(items: List[Dict[str, Any]], page: int = 1) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    if items:
        for r in items:
            label = f"{r.get('title') or r['chat_id']}"
            rows.append([InlineKeyboardButton(text=label, callback_data=f"child:ch:{r['id']}")])
            rows.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"child:chdel:{r['id']}")])
    else:
        rows.append([InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö", callback_data="noop")])

    rows.append([InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —á–∞—Ç", callback_data="child:chadd")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="child:home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)
