# app/bots/ga_bot.py
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message

from app.services.membership import is_in_group
from app.services.tenants_simple import upsert_tenant, save_bot_username
from app.services.webhooks_child import set_child_webhook
from app.settings import ADMIN_IDS

import asyncio

router = Router()


@router.message(Command("start"))
async def start(msg: Message, bot: Bot):
    """–û–Ω–±–æ—Ä–¥–∏–Ω–≥: –ø—Ä–æ—Å–∏–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ."""
    if await is_in_group(bot, msg.from_user.id):
        await msg.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç—ã –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ ‚Äî –ø—Ä–∏—à–ª–∏ API-token —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ "
            "(—Ñ–æ—Ä–º–∞—Ç 1234567890:AAAA...). –û–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü ‚Üí –æ–¥–∏–Ω –±–æ—Ç."
        )
    else:
        await msg.answer(
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ. –ù–∞–ø–∏—à–∏ @toffadds, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è."
        )


@router.message(F.text.regexp(r"^\d{9,10}:[A-Za-z0-9_-]{35,}$"))
async def connect_child(msg: Message, bot: Bot):
    uid = msg.from_user.id
    if not await is_in_group(bot, uid):
        return await msg.answer("–¢—ã –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ. –ù–∞–ø–∏—à–∏ @toffadds.")

    token = msg.text.strip()
    note = await msg.answer("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω. –°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞‚Ä¶")

    try:
        # 1) –ë–î
        tenant_id, secret = await upsert_tenant(uid, msg.from_user.username, token)
        await note.edit_text(f"üóÑ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ (tenant_id={tenant_id}). –ü—Ä–æ–≤–µ—Ä—è—é –±–æ—Ç–∞‚Ä¶")

        # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–µ—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
        cbot = Bot(token)
        me = await cbot.get_me()
        await save_bot_username(tenant_id, me.username)
        await note.edit_text(f"ü§ñ –ù–∞–π–¥—ë–Ω –±–æ—Ç @{me.username}. –°—Ç–∞–≤–ª—é –≤–µ–±—Ö—É–∫‚Ä¶")

        # 3) –í–µ–±—Ö—É–∫ –¥–µ—Ç—Å–∫–æ–º—É –±–æ—Ç—É
        await set_child_webhook(cbot, tenant_id, secret)
        await msg.answer(
            f"‚úÖ –í–∞—à –±–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω–µ–º—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: @{me.username}"
        )
    except Exception as e:
        # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏ –æ—Ç–¥–∞–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        text = str(e)
        await msg.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞.\n"
            f"`{text}`\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å –≤ .env:\n"
            "‚Ä¢ DATABASE_URL (–ø—Ä–∏–º–µ—Ä: postgresql+asyncpg://multibot:multibot_pass@127.0.0.1:5432/multibot)\n"
            "‚Ä¢ WEB_BASE=https://62.60.216.184\n"
            "–ò —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø—É —Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫.",
            parse_mode="Markdown",
        )
        raise

@router.message(Command("deploy"))
async def deploy(msg: Message):
    """
    –î–µ–ø–ª–æ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
    git fetch/reset ‚Üí pip install -r requirements.txt ‚Üí restart systemd service.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–∑ GA_ADMIN_IDS.
    """
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer(
            f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–µ–ø–ª–æ–π. –¢–≤–æ–π Telegram ID: `{msg.from_user.id}`\n"
            f"–î–æ–±–∞–≤—å –µ–≥–æ –≤ GA_ADMIN_IDS –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown",
        )

    await msg.answer("–ó–∞–ø—É—Å—Ç–∏–ª –¥–µ–ø–ª–æ–π‚Ä¶")
    proc = await asyncio.create_subprocess_shell(
        "/usr/local/bin/multibot_deploy.sh",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
    )
    out, _ = await proc.communicate()
    text = out.decode(errors="ignore")[-3500:] or "no output"
    await msg.answer(f"–ì–æ—Ç–æ–≤–æ.\n```\n{text}\n```", parse_mode="Markdown")
