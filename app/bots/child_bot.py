from __future__ import annotations

import asyncio
from typing import Optional, Tuple, Dict

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, ChatJoinRequest, ChatMemberUpdated,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.enums import ParseMode

from app.bots.common import (
    child_admin_kb, child_settings_kb,
)
from app.services.greetings_simple import get_greeting, save_greeting  # —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
from app.services.settings_simple import get_collect_requests, toggle_collect_requests
from app.services.pending import add_request, list_new, mark_approved, mark_failed

router = Router()

# ====== helpers ======

def _tenant_id_from_bot(bot: Bot) -> int:
    # middleware –∫–ª–∞–¥—ë—Ç —Å—é–¥–∞ —Å–ª–æ–≤–∞—Ä—å: {"id": t.id, "owner_user_id": ...}
    t = getattr(bot, "_tenant", None)
    if not t or "id" not in t:
        raise RuntimeError("Tenant context is missing. Check TenantContext middleware.")
    return int(t["id"])

async def _send_dm_greeting(bot: Bot, user_id: int, tenant_id: int, kind: str = "hello") -> bool:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º/–ø—Ä–æ—â–∞–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è (403 –∏ —Ç.–ø.) –∏–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ù–ò–ß–ï–ì–û –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    g = await get_greeting(tenant_id, kind)
    if not g:
        return False

    text = g.get("text") or ""
    parse_mode = g.get("parse_mode") or None
    button_text = g.get("button_text")
    button_url = g.get("button_url")
    disable_preview = bool(g.get("disable_preview") or False)

    kb: Optional[InlineKeyboardMarkup] = None
    if button_text and button_url:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=button_url)]
        ])

    try:
        # –ú–µ–¥–∏–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ñ–æ—Ç–æ > –≤–∏–¥–µ–æ > –∫—Ä—É–∂–æ–∫ > –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        if g.get("photo_file_id"):
            await bot.send_photo(
                chat_id=user_id,
                photo=g["photo_file_id"],
                caption=text or None,
                parse_mode=parse_mode or ParseMode.MARKDOWN,
                reply_markup=kb,
                has_spoiler=False,
            )
            return True
        if g.get("video_file_id"):
            await bot.send_video(
                chat_id=user_id,
                video=g["video_file_id"],
                caption=text or None,
                parse_mode=parse_mode or ParseMode.MARKDOWN,
                reply_markup=kb,
                supports_streaming=True
            )
            return True
        if g.get("video_note_file_id"):
            await bot.send_video_note(
                chat_id=user_id,
                video_note=g["video_note_file_id"],
                reply_markup=kb,
            )
            if text:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=parse_mode or ParseMode.MARKDOWN,
                    reply_markup=kb,
                    disable_web_page_preview=disable_preview,
                )
            return True

        # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        if text:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=parse_mode or ParseMode.MARKDOWN,
                reply_markup=kb,
                disable_web_page_preview=disable_preview,
            )
            return True

        return False

    except TelegramForbiddenError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª –õ–°/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ‚Äî –º–æ–ª—á–∏–º
        return False
    except TelegramBadRequest:
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π parse_mode/–∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –ø–æ—Ç–æ–∫
        return False


# ====== /admin –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======

@router.message(Command("admin"))
async def child_admin_menu(msg: Message, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    collect = await get_collect_requests(tenant_id)
    await msg.answer(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –±–æ—Ç–∞: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ—â–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏.\n"
        "–ë–æ—Ç –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–µ—Ç –≤ —á–∞—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–° (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).",
        reply_markup=child_admin_kb(collect_enabled=collect)
    )


@router.callback_query(F.data == "child:home")
async def cb_child_home(cb: CallbackQuery, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    collect = await get_collect_requests(tenant_id)
    await cb.message.edit_text(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é",
        reply_markup=child_admin_kb(collect_enabled=collect)
    )
    await cb.answer()


# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======

@router.callback_query(F.data == "child:settings")
async def cb_child_settings(cb: CallbackQuery, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    collect = await get_collect_requests(tenant_id)
    await cb.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "‚Ä¢ –ö–æ–ø–∏—Ç—å –∑–∞—è–≤–∫–∏ ‚Äî –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ù–ï –∞–ø—Ä—É–≤—è—Ç—Å—è —Å—Ä–∞–∑—É, –∞ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ—á–µ—Ä–µ–¥—å.\n"
        "‚Ä¢ –°–æ–±—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏ ‚Äî –∞–ø—Ä—É–≤–∏—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ —Ç–∏—Ö–æ –ø—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –õ–°.",
        reply_markup=child_settings_kb(collect_enabled=collect)
    )
    await cb.answer()


@router.callback_query(F.data == "child:settings:collect_toggle")
async def cb_child_collect_toggle(cb: CallbackQuery, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    new_value = await toggle_collect_requests(tenant_id)
    await cb.message.edit_reply_markup(reply_markup=child_settings_kb(collect_enabled=new_value))
    await cb.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")


@router.callback_query(F.data == "child:settings:collect_run")
async def cb_child_collect_run(cb: CallbackQuery, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    await cb.answer("–ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä –∑–∞—è–≤–æ–∫‚Ä¶", show_alert=False)

    rows = await list_new(tenant_id, limit=2000)
    ok, fail = 0, 0

    for r in rows:
        row_id = r["id"]
        chat_id = int(r["chat_id"])
        user_id = int(r["user_id"])

        try:
            await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
            # —Ç–∏—Ö–æ –ø—Ä–æ–±—É–µ–º –õ–°
            delivered = await _send_dm_greeting(bot, user_id, tenant_id, kind="hello")
            await mark_approved(row_id, dm_ok=delivered, error=None)
            ok += 1
        except Exception as e:
            await mark_failed(row_id, error=str(e)[:300])
            fail += 1

        # –∞–Ω—Ç–∏-—Ñ–ª—É–¥
        await asyncio.sleep(0.15)

    await cb.message.answer(f"–°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω:\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {ok}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {fail}")
    await cb.answer()


# ====== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/–ü—Ä–æ—â–∞–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Ç–µ–∫—Å—Ç–∞) ======
# –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã, –Ω–∏–∂–µ ‚Äî —Ç–æ–ª—å–∫–æ "–±—ã—Å—Ç—Ä—ã–µ" –∑–∞–≥–ª—É—à–∫–∏ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–≤–æ–∏–º–∏.

@router.callback_query(F.data.startswith("child:greet:"))
async def cb_child_greet_menu(cb: CallbackQuery, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    kind = "hello" if cb.data.endswith(":hello") else "bye"
    g = await get_greeting(tenant_id, kind)
    title = "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" if kind == "hello" else "üßπ –ü—Ä–æ—â–∞–Ω–∏–µ"

    lines = [title, ""]
    if g:
        media = (
            "—Ñ–æ—Ç–æ" if g.get("photo_file_id") else
            "–≤–∏–¥–µ–æ" if g.get("video_file_id") else
            "–∫—Ä—É–∂–æ–∫" if g.get("video_note_file_id") else "‚Äî"
        )
        lines.append(f"–¢–µ–∫—Å—Ç: {g.get('text') or '‚Äî'}")
        lines.append(f"–ú–µ–¥–∏–∞: {media}")
        if g.get("button_text") and g.get("button_url"):
            lines.append(f"–ö–Ω–æ–ø–∫–∞: {g['button_text']} ‚Üí {g['button_url']}")
    else:
        lines.append("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")

    lines.append("")
    lines.append("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞/–∫–Ω–æ–ø–æ–∫ ‚Äî –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (–±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö).")

    await cb.message.edit_text("\n".join(lines))
    await cb.answer()


# ====== –°–æ–±—ã—Ç–∏—è: –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ / –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ ======

@router.chat_join_request()
async def on_chat_join_request(event: ChatJoinRequest, bot: Bot):
    tenant_id = _tenant_id_from_bot(bot)
    chat_id = int(event.chat.id)
    user_id = int(event.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
    collect = await get_collect_requests(tenant_id)

    if collect:
        # –∫–æ–ø–∏–º –∑–∞—è–≤–∫—É
        try:
            await add_request(tenant_id=tenant_id, chat_id=chat_id, user_id=user_id)
        except Exception:
            # –ù–µ –ª–æ–º–∞–µ–º –ø–æ—Ç–æ–∫
            pass
        # –ù–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–µ–º (–Ω–∏ –õ–°, –Ω–∏ –∞–ø—Ä—É–≤–∞)
        return

    # –∏–Ω–∞—á–µ ‚Äî –∞–≤—Ç–æ–∞–ø—Ä—É–≤ + —Ç–∏—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞ –õ–°
    try:
        await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –º–æ–ª—á–∏–º (–Ω–µ –ø–∏—à–µ–º –≤ —á–∞—Ç—ã), –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return

    # –õ–° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî —Ç–∏—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞
    await _send_dm_greeting(bot, user_id, tenant_id, kind="hello")


@router.chat_member()
async def on_chat_member_update(event: ChatMemberUpdated, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –õ–°, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç/–∫–∏–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
    –ù–ò–ß–ï–ì–û –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    try:
        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —É—Ö–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if event.old_chat_member and event.new_chat_member:
            old_status = getattr(event.old_chat_member, "status", None)
            new_status = getattr(event.new_chat_member, "status", None)
        else:
            return

        # –ë—ã–ª member ‚Üí —Å—Ç–∞–ª left/kicked
        if str(old_status) in {"member"} and str(new_status) in {"left", "kicked"}:
            tenant_id = _tenant_id_from_bot(bot)
            user_id = int(event.from_user.id) if event.from_user else None
            # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–∞—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –Ω—É–∂–Ω—ã–π id ‚Äî –≤ new_chat_member.user.id
            if not user_id and hasattr(event, "new_chat_member") and getattr(event.new_chat_member, "user", None):
                user_id = int(event.new_chat_member.user.id)
            if not user_id:
                return

            # –¢–∏—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞ –õ–°-–ø—Ä–æ—â–∞–Ω–∏—è
            await _send_dm_greeting(bot, user_id, tenant_id, kind="bye")

    except Exception:
        # –õ—é–±—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏–º (–Ω–µ –ø–∏—à–µ–º –≤ —á–∞—Ç—ã)
        return
