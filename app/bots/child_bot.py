from __future__ import annotations
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bots.common import child_admin_kb, channels_list_kb
from app.services.channels_simple import delete_channel, list_channels, upsert_channel, is_tenant_chat
from app.services.greetings_simple import (
    get_greeting, set_text, set_photo, set_video, set_video_note,
    clear_media, set_button_start, set_button_url, clear_button
)

router = Router()

# ========= FSM =========
class AddChatSG(StatesGroup):
    waiting_chat = State()

class GreetSG(StatesGroup):
    # kind —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ FSM data: "hello" | "bye"
    wait_text = State()
    wait_photo = State()       # –æ–∂–∏–¥–∞–µ–º photo/file_id
    wait_video = State()
    wait_note = State()
    wait_btn_text = State()
    wait_btn_mode = State()
    wait_btn_url = State()


# ========= /admin =========
@router.message(Command("admin"))
async def child_admin(msg: Message, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    if msg.from_user.id != tenant["owner_user_id"]:
        return await msg.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
    await msg.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=child_admin_kb())


# ========= back =========
@router.callback_query(F.data == "child:back")
async def child_back(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await cb.message.edit_text("–ê–¥–º–∏–Ω –º–µ–Ω—é")
    await cb.message.edit_reply_markup(reply_markup=child_admin_kb())
    await cb.answer()


# ========= –ß–∞—Ç—ã/–ö–∞–Ω–∞–ª—ã =========
@router.callback_query(F.data == "child:chats")
async def child_chats(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã:")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()


@router.callback_query(F.data == "child:chadd")
async def child_ch_add(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AddChatSG.waiting_chat)
    text = (
        "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª.\n"
        "2) –ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ *ID* (–Ω–∞–ø—Ä–∏–º–µ—Ä `-1001234567890`) **–∏–ª–∏** `@username` –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: /cancel"
    )
    await cb.message.edit_text(text, parse_mode="Markdown")
    await cb.answer()


@router.message(AddChatSG.waiting_chat)
async def add_chat_receive(msg: Message, bot: Bot, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    if msg.from_user.id != tenant["owner_user_id"]:
        return await msg.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")

    raw = (msg.text or "").strip()
    if not raw:
        return await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890) –∏–ª–∏ @username.")

    if raw.startswith("@"):
        identifier = raw
    else:
        try:
            identifier = int(raw)
        except ValueError:
            return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @username")

    try:
        chat = await bot.get_chat(identifier)
    except Exception as e:
        return await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ '{raw}'. –û—à–∏–±–∫–∞: {e}")

    try:
        me = await bot.get_me()
        cm = await bot.get_chat_member(chat.id, me.id)
        if getattr(cm, "status", "") not in {"administrator", "creator"}:
            return await msg.answer("–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω. –°–¥–µ–ª–∞–π –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º.")

    await upsert_channel(tenant["id"], chat.id, chat.title)
    await state.clear()
    items = await list_channels(tenant["id"])
    await msg.answer("‚úÖ –ß–∞—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=channels_list_kb(items))


@router.message(Command("cancel"))
async def add_chat_cancel(msg: Message, state: FSMContext, **data):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–µ—Ä–Ω–∏—Å—å –≤ /admin.")


@router.callback_query(F.data.startswith("child:chdel:"))
async def child_ch_delete(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    ch_id = int(cb.data.split(":")[-1])
    await delete_channel(tenant["id"], ch_id)
    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã: (—É–¥–∞–ª–µ–Ω–æ)")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()


# ========= –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ø—Ä–æ—â–∞–Ω–∏—è =========
def _editor_kb(kind: str) -> InlineKeyboardMarkup:
    # kind: "hello" | "bye"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"child:{kind}:text"),
            InlineKeyboardButton(text="üñº –§–æ—Ç–æ",  callback_data=f"child:{kind}:photo"),
        ],
        [
            InlineKeyboardButton(text="üé¨ –í–∏–¥–µ–æ", callback_data=f"child:{kind}:video"),
            InlineKeyboardButton(text="üîµ –ö—Ä—É–∂–æ–∫", callback_data=f"child:{kind}:note"),
        ],
        [
            InlineKeyboardButton(text="üîò –ö–Ω–æ–ø–∫–∞", callback_data=f"child:{kind}:btn"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"child:{kind}:clear_media"),
        ],
        [
            InlineKeyboardButton(text="üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"child:{kind}:preview"),
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="child:back")],
    ])


async def _render_editor(cb_or_msg, kind: str, tenant_id: int):
    g = await get_greeting(tenant_id, kind)
    lines = [("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" if kind == "hello" else "üßπ –ü—Ä–æ—â–∞–Ω–∏–µ"), ""]
    if g and g.get("text"):
        lines.append(f"–¢–µ–∫—Å—Ç: {g['text'][:300] + ('‚Ä¶' if len(g['text'])>300 else '')}")
    else:
        lines.append("–¢–µ–∫—Å—Ç: ‚Äî –Ω–µ –∑–∞–¥–∞–Ω ‚Äî")
    media = []
    if g and g.get("photo_file_id"): media.append("—Ñ–æ—Ç–æ")
    if g and g.get("video_file_id"): media.append("–≤–∏–¥–µ–æ")
    if g and g.get("video_note_file_id"): media.append("–∫—Ä—É–∂–æ–∫")
    lines.append("–ú–µ–¥–∏–∞: " + (", ".join(media) if media else "‚Äî"))
    if g and g.get("button_text"):
        mode = g.get("button_kind", "start")
        if mode == "url":
            lines.append(f"–ö–Ω–æ–ø–∫–∞: ¬´{g['button_text']}¬ª ‚Üí URL")
        else:
            lines.append(f"–ö–Ω–æ–ø–∫–∞: ¬´{g['button_text']}¬ª ‚Üí START + –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ")
    else:
        lines.append("–ö–Ω–æ–ø–∫–∞: ‚Äî –Ω–µ—Ç ‚Äî")

    text = "\n".join(lines)
    kb = _editor_kb(kind)
    if isinstance(cb_or_msg, CallbackQuery):
        await cb_or_msg.message.edit_text(text, reply_markup=kb)
        await cb_or_msg.answer()
    else:
        await cb_or_msg.answer(text, reply_markup=kb)


@router.callback_query(F.data.in_({"child:hello", "child:bye"}))
async def greet_open(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if cb.data.endswith("hello") else "bye"
    await _render_editor(cb, kind, tenant["id"])


# --- –¢–µ–∫—Å—Ç
@router.callback_query(F.data.func(lambda v: v in {"child:hello:text", "child:bye:text"}))
async def greet_edit_text_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await state.update_data(kind=kind)
    await state.set_state(GreetSG.wait_text)
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (HTML –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).")
    await cb.answer()

@router.message(GreetSG.wait_text)
async def greet_edit_text_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    await set_text(tenant["id"], kind, msg.html_text or msg.text or "")
    await state.clear()
    await _render_editor(msg, kind, tenant["id"])


# --- –§–æ—Ç–æ
@router.callback_query(F.data.func(lambda v: v in {"child:hello:photo", "child:bye:photo"}))
async def greet_edit_photo_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await state.update_data(kind=kind)
    await state.set_state(GreetSG.wait_photo)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª).")
    await cb.answer()

@router.message(GreetSG.wait_photo, F.photo)
async def greet_edit_photo_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    file_id = msg.photo[-1].file_id
    await set_photo(tenant["id"], kind, file_id)
    await state.clear()
    await _render_editor(msg, kind, tenant["id"])

@router.message(GreetSG.wait_photo)
async def greet_edit_photo_bad(msg: Message, **_):
    await msg.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# --- –í–∏–¥–µ–æ
@router.callback_query(F.data.func(lambda v: v in {"child:hello:video", "child:bye:video"}))
async def greet_edit_video_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await state.update_data(kind=kind)
    await state.set_state(GreetSG.wait_video)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ (–∫–∞–∫ –≤–∏–¥–µ–æ, –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª).")
    await cb.answer()

@router.message(GreetSG.wait_video, F.video)
async def greet_edit_video_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    file_id = msg.video.file_id
    await set_video(tenant["id"], kind, file_id)
    await state.clear()
    await _render_editor(msg, kind, tenant["id"])

@router.message(GreetSG.wait_video)
async def greet_edit_video_bad(msg: Message, **_):
    await msg.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∏–¥–µ–æ. –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫.")


# --- –ö—Ä—É–∂–æ–∫ (video_note)
@router.callback_query(F.data.func(lambda v: v in {"child:hello:note", "child:bye:note"}))
async def greet_edit_note_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await state.update_data(kind=kind)
    await state.set_state(GreetSG.wait_note)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏ –∫—Ä—É–∂–æ–∫ (video note).")
    await cb.answer()

@router.message(GreetSG.wait_note, F.video_note)
async def greet_edit_note_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    file_id = msg.video_note.file_id
    await set_video_note(tenant["id"], kind, file_id)
    await state.clear()
    await _render_editor(msg, kind, tenant["id"])

@router.message(GreetSG.wait_note)
async def greet_edit_note_bad(msg: Message, **_):
    await msg.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫—Ä—É–∂–æ–∫. –ü—Ä–∏—à–ª–∏ video note.")


# --- –û—á–∏—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞
@router.callback_query(F.data.func(lambda v: v in {"child:hello:clear_media", "child:bye:clear_media"}))
async def greet_clear_media(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await clear_media(tenant["id"], kind)
    await _render_editor(cb, kind, tenant["id"])


# --- –ö–Ω–æ–ø–∫–∞
@router.callback_query(F.data.func(lambda v: v in {"child:hello:btn", "child:bye:btn"}))
async def greet_btn_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    await state.update_data(kind=kind)
    await state.set_state(GreetSG.wait_btn_text)
    await cb.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ /cancel).")
    await cb.answer()

@router.message(GreetSG.wait_btn_text)
async def greet_btn_text(msg: Message, state: FSMContext, **data):
    await state.update_data(btn_text=(msg.text or "").strip())
    await state.set_state(GreetSG.wait_btn_mode)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø—É—Å–∫ (/start) + –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ", callback_data="child:btnmode:start")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å URL", callback_data="child:btnmode:url")],
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–∏:", reply_markup=kb)

@router.callback_query(F.data.in_(["child:btnmode:start", "child:btnmode:url"]))
async def greet_btn_mode(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    text = d.get("btn_text", "–ü–µ—Ä–µ–π—Ç–∏")

    if cb.data.endswith(":start"):
        await set_button_start(tenant["id"], kind, text)
        await state.clear()
        await _render_editor(cb, kind, tenant["id"])
    else:
        await state.set_state(GreetSG.wait_btn_url)
        await cb.message.edit_text("–ü—Ä–∏—à–ª–∏ URL (https://‚Ä¶)")
        await cb.answer()

@router.message(GreetSG.wait_btn_url)
async def greet_btn_url(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    d = await state.get_data()
    kind = d.get("kind", "hello")
    text = d.get("btn_text", "–û—Ç–∫—Ä—ã—Ç—å")
    url = (msg.text or "").strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        return await msg.answer("–ù—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http/https.")
    await set_button_url(tenant["id"], kind, text, url)
    await state.clear()
    await _render_editor(msg, kind, tenant["id"])

# ========= –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä =========
def _build_btn_markup(g) -> InlineKeyboardMarkup | None:
    if not g or not g.get("button_text"):
        return None
    if g.get("button_kind", "start") == "url":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=g["button_text"], url=g.get("button_url") or "https://t.me")]
        ])
    else:
        # –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è "–∫–∞–∫ /start" + —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=g["button_text"], callback_data="user:start_and_delete")]
        ])

async def _send_greeting_like(bot: Bot, user_id: int, g) -> None:
    if not g:
        return
    kb = _build_btn_markup(g)
    text = g.get("text") or ""

    if g.get("photo_file_id"):
        await bot.send_photo(user_id, g["photo_file_id"], caption=text, parse_mode="HTML",
                             disable_web_page_preview=True, reply_markup=kb)
    elif g.get("video_file_id"):
        await bot.send_video(user_id, g["video_file_id"], caption=text, parse_mode="HTML",
                             disable_web_page_preview=True, reply_markup=kb)
    elif g.get("video_note_file_id"):
        # —É –∫—Ä—É–∂–∫–∞ –Ω–µ—Ç caption ‚Äì –æ—Ç–ø—Ä–∞–≤–∏–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_video_note(user_id, g["video_note_file_id"])
        if text or kb:
            await bot.send_message(user_id, text or " ", parse_mode="HTML",
                                   disable_web_page_preview=True, reply_markup=kb)
    else:
        await bot.send_message(user_id, text or " ", parse_mode="HTML",
                               disable_web_page_preview=True, reply_markup=kb)

@router.callback_query(F.data.func(lambda v: v in {"child:hello:preview", "child:bye:preview"}))
async def greet_preview(cb: CallbackQuery, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kind = "hello" if ":hello:" in cb.data else "bye"
    g = await get_greeting(tenant["id"], kind)
    await _send_greeting_like(bot, cb.from_user.id, g)
    await cb.answer("–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –õ–°.")


# ========= –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ¬´/start + —É–¥–∞–ª–∏—Ç—å¬ª =========
@router.callback_query(F.data == "user:start_and_delete")
async def user_start_and_delete(cb: CallbackQuery, bot: Bot):
    # –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç–∏—Ç—å ¬´–≥–æ—Ç–æ–≤–æ¬ª (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    try:
        await bot.delete_message(cb.message.chat.id, cb.message.message_id)
    except Exception:
        pass
    await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", show_alert=False)


# ========= –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ + –õ–° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =========
@router.chat_join_request()
async def on_join_request(event, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return
    chat_id = event.chat.id
    user_id = event.from_user.id

    if not await is_tenant_chat(tenant["id"], chat_id):
        return

    try:
        await bot.approve_chat_join_request(chat_id, user_id)
    except Exception:
        return

    g = await get_greeting(tenant["id"], "hello")
    try:
        await _send_greeting_like(bot, user_id, g)
    except Exception:
        pass  # —é–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª –î–ú –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª


# ========= –ü—Ä–æ—â–∞–Ω–∏–µ –≤ –õ–° –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ =========
@router.chat_member()
async def on_chat_member(evt, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return
    if not await is_tenant_chat(tenant["id"], evt.chat.id):
        return

    try:
        old = getattr(evt.old_chat_member, "status", "")
        new = getattr(evt.new_chat_member, "status", "")
    except Exception:
        return

    if old in {"member"} and new in {"left", "kicked"}:
        user_id = evt.from_user.id if evt.from_user else None
        if not user_id:
            return
        g = await get_greeting(tenant["id"], "bye")
        try:
            await _send_greeting_like(bot, user_id, g)
        except Exception:
            pass
