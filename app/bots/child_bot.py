from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.bots.common import child_admin_kb, channels_list_kb
from app.services.channels_simple import delete_channel, list_channels, upsert_channel
from app.services.greetings_simple import get_greeting, upsert_greeting
from app.services.channels_simple import is_tenant_chat

router = Router()

# ====== FSM ======
class AddChatSG(StatesGroup):
    waiting_chat = State()

class HelloSG(StatesGroup):
    waiting_text = State()
    waiting_button = State()

class ByeSG(StatesGroup):
    waiting_text = State()
    waiting_button = State()

# ====== /admin ======
@router.message(Command("admin"))
async def child_admin(msg: Message, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    if msg.from_user.id != tenant["owner_user_id"]:
        return await msg.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")

    await msg.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=child_admin_kb())

# ====== ¬´–ù–∞–∑–∞–¥¬ª ======
@router.callback_query(F.data == "child:back")
async def child_back(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await cb.message.edit_text("–ê–¥–º–∏–Ω –º–µ–Ω—é")
    await cb.message.edit_reply_markup(reply_markup=child_admin_kb())
    await cb.answer()

# ====== –ß–∞—Ç—ã/–ö–∞–Ω–∞–ª—ã ======
@router.callback_query(F.data == "child:chats")
async def child_chats(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã:")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()

@router.callback_query(F.data == "child:chadd")
async def child_ch_add(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AddChatSG.waiting_chat)
    text = (
        "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª.\n"
        "2) –ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ *ID* (–Ω–∞–ø—Ä–∏–º–µ—Ä `-1001234567890`) **–∏–ª–∏** `@username` –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: /cancel"
    )
    await cb.message.edit_text(text, parse_mode="Markdown")
    await cb.answer()

@router.message(AddChatSG.waiting_chat)
async def add_chat_receive(msg: Message, bot: Bot, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    if msg.from_user.id != tenant["owner_user_id"]:
        return await msg.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")

    raw = (msg.text or "").strip()
    if not raw:
        return await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890) –∏–ª–∏ @username.")

    if raw.startswith("@"):
        identifier = raw
    else:
        try:
            identifier = int(raw)
        except ValueError:
            return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @username")

    try:
        chat = await bot.get_chat(identifier)
    except Exception as e:
        return await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ '{raw}'. –û—à–∏–±–∫–∞: {e}")

    try:
        me = await bot.get_me()
        cm = await bot.get_chat_member(chat.id, me.id)
        if getattr(cm, "status", "") not in {"administrator", "creator"}:
            return await msg.answer("–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º.")

    await upsert_channel(tenant["id"], chat.id, chat.title)
    await state.clear()
    items = await list_channels(tenant["id"])
    await msg.answer("‚úÖ –ß–∞—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=channels_list_kb(items))

@router.message(Command("cancel"))
async def add_chat_cancel(msg: Message, state: FSMContext, **data):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ /admin.")

@router.callback_query(F.data.startswith("child:chdel:"))
async def child_ch_delete(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    ch_id = int(cb.data.split(":")[-1])
    await delete_channel(tenant["id"], ch_id)
    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã: (—É–¥–∞–ª–µ–Ω–æ)")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()

# ====== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / –ü—Ä–æ—â–∞–Ω–∏–µ (—Ä–µ–¥–∞–∫—Ç–æ—Ä) ======
def _greet_editor_kb(kind: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"child:{kind}:edit")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="child:back")],
    ])

@router.callback_query(F.data == "child:hello")
async def hello_open(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    g = await get_greeting(tenant["id"], "hello")
    text = g["text"] if g and g.get("text") else "‚Äî —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî"
    await cb.message.edit_text(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n{text}", reply_markup=_greet_editor_kb("hello"))
    await cb.answer()

@router.callback_query(F.data == "child:bye")
async def bye_open(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    g = await get_greeting(tenant["id"], "bye")
    text = g["text"] if g and g.get("text") else "‚Äî —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî"
    await cb.message.edit_text(f"üßπ –ü—Ä–æ—â–∞–Ω–∏–µ:\n\n{text}", reply_markup=_greet_editor_kb("bye"))
    await cb.answer()

@router.callback_query(F.data == "child:hello:edit")
async def hello_edit_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(HelloSG.waiting_text)
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (HTML —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).")
    await cb.answer()

@router.message(HelloSG.waiting_text)
async def hello_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    await upsert_greeting(tenant["id"], "hello", msg.html_text or msg.text or "")
    await state.clear()
    await msg.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. /admin")

@router.callback_query(F.data == "child:bye:edit")
async def bye_edit_start(cb: CallbackQuery, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(ByeSG.waiting_text)
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ—â–∞–Ω–∏—è (HTML —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).")
    await cb.answer()

@router.message(ByeSG.waiting_text)
async def bye_save(msg: Message, state: FSMContext, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    await upsert_greeting(tenant["id"], "bye", msg.html_text or msg.text or "")
    await state.clear()
    await msg.answer("‚úÖ –ü—Ä–æ—â–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. /admin")

# ====== –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ + –õ–° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ======
@router.chat_join_request()
async def on_join_request(event, bot: Bot, **data):
    """
    –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞.
    –ü–æ—Å–ª–µ approve –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –õ–°.
    """
    tenant = data.get("tenant")
    if not tenant:
        return
    chat_id = event.chat.id
    user_id = event.from_user.id

    if not await is_tenant_chat(tenant["id"], chat_id):
        return

    try:
        await bot.approve_chat_join_request(chat_id, user_id)
    except Exception:
        return

    g = await get_greeting(tenant["id"], "hello")
    if not g or not g.get("text"):
        return
    try:
        await bot.send_message(user_id, g["text"], parse_mode="HTML", disable_web_page_preview=True)
    except Exception:
        # —é–∑–µ—Ä –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–æ—Ç–∞ / –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ‚Äî –∏–≥–Ω–æ—Ä
        pass

# ====== –õ–° –ø—Ä–æ—â–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ ======
@router.chat_member()
async def on_chat_member(evt, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return

    if not await is_tenant_chat(tenant["id"], evt.chat.id):
        return

    try:
        old = getattr(evt.old_chat_member, "status", "")
        new = getattr(evt.new_chat_member, "status", "")
    except Exception:
        return

    if old in {"member"} and new in {"left", "kicked"}:
        g = await get_greeting(tenant["id"], "bye")
        if not g or not g.get("text"):
            return
        user_id = evt.from_user.id if evt.from_user else None
        if not user_id:
            return
        try:
            await bot.send_message(user_id, g["text"], parse_mode="HTML", disable_web_page_preview=True)
        except Exception:
            pass
