from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.bots.common import child_admin_kb, channels_list_kb
from app.services.channels_simple import delete_channel, list_channels, upsert_channel

router = Router()


# ====== /admin ======

@router.message(Command("admin"))
async def child_admin(msg: Message, bot: Bot, **data):
    tenant = data.get("tenant")
    if not tenant:
        return await msg.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    if msg.from_user.id != tenant["owner_user_id"]:
        return await msg.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ /admin —Ç–æ–ª—å–∫–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")

    await msg.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=child_admin_kb())


# ====== –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª ======

@router.callback_query(F.data == "child:back")
async def child_back(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    await cb.message.edit_text("–ê–¥–º–∏–Ω –º–µ–Ω—é")
    await cb.message.edit_reply_markup(reply_markup=child_admin_kb())
    await cb.answer()


# ====== –≠–∫—Ä–∞–Ω ¬´–ß–∞—Ç—ã/–ö–∞–Ω–∞–ª—ã¬ª ======

@router.callback_query(F.data == "child:chats")
async def child_chats(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã:")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()


@router.callback_query(F.data == "child:chadd")
async def child_ch_add(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    text = (
        "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª.\n"
        "2) –í —Ç–æ–º —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /link\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —á–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ."
    )
    items = await list_channels(tenant["id"])
    await cb.message.edit_text(text)
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()


@router.callback_query(F.data.startswith("child:chdel:"))
async def child_ch_delete(cb: CallbackQuery, **data):
    tenant = data.get("tenant")
    if not tenant or cb.from_user.id != tenant["owner_user_id"]:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    ch_id = int(cb.data.split(":")[-1])
    await delete_channel(tenant["id"], ch_id)

    items = await list_channels(tenant["id"])
    await cb.message.edit_text("–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã: (—É–¥–∞–ª–µ–Ω–æ)")
    await cb.message.edit_reply_markup(reply_markup=channels_list_kb(items))
    await cb.answer()


# ====== /link ‚Äî –ø–∏—à–µ–º –≤ —Å–∞–º–æ–º —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ ======

@router.message(Command("link"))
async def link_here(msg: Message, bot: Bot, **data):
    """
    –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –ø–∏—à–µ–º –í–ù–£–¢–†–ò —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞, –≥–¥–µ –±–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ title –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ tenant.
    """
    tenant = data.get("tenant")
    if not tenant:
        # –ß—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ø–∞–º–∏–ª, –µ—Å–ª–∏ —Ö—É–∫ –ø—Ä–∏–ª–µ—Ç–µ–ª –Ω–µ –¥–ª—è –Ω–∞—à–µ–≥–æ tenancy
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü
    if msg.from_user and msg.from_user.id != tenant["owner_user_id"]:
        return

    chat = await bot.get_chat(msg.chat.id)
    await upsert_channel(tenant["id"], chat.id, chat.title)

    await msg.reply("‚úÖ –ß–∞—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ ¬´–ß–∞—Ç—ã/–ö–∞–Ω–∞–ª—ã¬ª.")
